jpsType: install
jpsVersion: '1.7.4'

name: Decidim
id: decidim-vanilla
description:
  short: Decidim Saas
categories:
  - apps/platforms
baseUrl: https://git.octree.ch/decidim/vocacity/docker/-/raw/main
logo: /overrides/0.24.3/app/assets/images/decidim_logo.png?inline=false
ssl: true
ha: false
envGroups: "vocacity"

globals:
  DB_PASSWORD: "${fn.password(32)}"
  DB_USER: "decidim_${fn.password(6)}"
  APP_SESSION_KEY: "${fn.password(16)}"
  SECRET_KEY_BASE: "${fn.password(128)}"
  MASTER_KEY: "${fn.password(32)}"
  REDIS_USER: "admin_${fn.password(6)}"
  REDIS_PASSWORD: "${fn.password(64)}"
settings:
  fields:
  - name: JOB_IMAGE_REGISTRY
    type: string
    caption: JOB_IMAGE_REGISTRY

  - type: string
    name: JOB_IMAGE_PAGE
    caption: JOB_IMAGE_PAGE

  - type: string
    name: PROD_IMAGE_REGISTRY
    caption: PROD_IMAGE_REGISTRY

  - type: string
    name: PROD_IMAGE_PATH
    caption: PROD_IMAGE_PATH

  - name: IMAGE_USERNAME
    caption: IMAGE_USERNAME
    type: string

  - name: IMAGE_PASSWORD
    caption: IMAGE_PASSWORD
    type: string

  - type: string
    name: TIMEZONE
    caption: TIMEZONE

  - type: string
    name: WEBHOOK_URL
    caption: WEBHOOK_URL

  - name: WEBHOOK_USERNAME
    caption: WEBHOOK_USERNAME
    type: string

  - name: WEBHOOK_PASSWORD
    caption: WEBHOOK_PASSWORD
    type: string

  - type: string
    name: WEBHOOK_HMAC
    caption: WEBHOOK_HMAC

  - type: string
    name: INSTANCE_UUID
    caption: INSTANCE_UUID
  - name: SMTP_HOST
    caption: SMTP_HOST
    type: string

  - name: SMTP_DOMAIN
    caption: SMTP_DOMAIN
    type: string

  - name: SMTP_PORT
    caption: SMTP_PORT
    type: string

  - name: SMTP_USERNAME
    caption: SMTP_USERNAME
    type: string

  - name: SMTP_PASSWORD
    caption: SMTP_PASSWORD
    type: string

  - type: string
    name: SMTP_AUTHENTICATION
    caption: SMTP_AUTHENTICATION

  - type: string
    name: SMTP_HELO_DOMAIN
    caption: SMTP_HELO_DOMAIN

  - type: string
    name: SMTP_OPEN_TIMEOUT
    caption: SMTP_OPEN_TIMEOUT

  - type: string
    name: SMTP_READ_TIMEOUT
    caption: SMTP_READ_TIMEOUT

nodes:
# NGINX Load balancer
- displayName: NGinx
  fixedCloudlets: 3
  flexibleCloudlets: 16
  diskLimit: 5G
  nodeGroup: bl
  nodeType: nginx-dockerized
  tag: 1.20.2
  volumes:
  - /public
  volumeMounts:
    /public:
      protocol: NFS4
      readOnly: true
      sourceNodeGroup: storage
      sourcePath: "/data"

# Decidim application
- displayName: Decidim
  fixedCloudlets: 3
  flexibleCloudlets: 8
  diskLimit: 100G
  count: 1
  env:
    APP_SESSION_KEY: "${globals.APP_SESSION_KEY}"
    INSTANCE_UUID: "${settings.INSTANCE_UUID}"
    DATABASE_HOST: psql
    DATABASE_PASSWORD: "${globals.DB_PASSWORD}"
    DATABASE_DATABASE: decidim
    DATABASE_USERNAME: "${globals.DB_USER}"
    DATABASE_URL: postgres://${globals.DB_USER}:${globals.DB_PASSWORD}@psql:5432/decidim
    SECRET_KEY_BASE: "${globals.SECRET_KEY_BASE}"
    MASTER_KEY: "${globals.MASTER_KEY}"
    SMTP_ADDRESS: "${settings.SMTP_HELO_DOMAIN}"
    SMTP_AUTHENTICATION: "${settings.SMTP_AUTHENTICATION}"
    SMTP_DOMAIN: "${settings.SMTP_DOMAIN}"
    SMTP_USERNAME: "${settings.SMTP_USERNAME}"
    SMTP_PASSWORD: "${settings.SMTP_PASSWORD}"
    SMTP_PORT: "${settings.SMTP_PORT}"
    SMTP_STARTTLS_AUTO: true
    RAILS_CACHE_MODE: "redis"
    RAILS_CACHE_REDIS_URL: "redis://${globals.REDIS_USER}:${globals.REDIS_PASSWORD}@redis:6379/0"
    RAILS_JOB_MODE: "sidekiq"
    JOB_REDIS_URL: "redis://${globals.REDIS_USER}:${globals.REDIS_PASSWORD}@redis:6379/1"
    TZ: "${settings.TIMEZONE}"
  links:
  - sqldb:psql
  - nosqldb:redis
  image: "${settings.PROD_IMAGE_PATH}"
  registry:
    url: "${settings.PROD_IMAGE_REGISTRY}"
    user: "${settings.IMAGE_USERNAME}"
    password: "${settings.IMAGE_PASSWORD}"
  nodeGroup: cp
  volumes:
  - /home/decidim/app/public
  volumeMounts:
    /home/decidim/app/public:
      protocol: NFS4
      readOnly: false
      sourceNodeGroup: storage
      sourcePath: "/data"

# Decidim runner (sidekiq+tasks)
- displayName: Sidekiq/Tasks
  fixedCloudlets: 4
  flexibleCloudlets: 6
  diskLimit: 5G
  env:
    APP_SESSION_KEY: "${globals.APP_SESSION_KEY}"
    INSTANCE_UUID: "${settings.INSTANCE_UUID}"
    DATABASE_HOST: psql
    DATABASE_PASSWORD: "${globals.DB_PASSWORD}"
    DATABASE_DATABASE: decidim
    DATABASE_USERNAME: "${globals.DB_USER}"
    DATABASE_URL: postgres://${globals.DB_USER}:${globals.DB_PASSWORD}@psql:5432/decidim
    SECRET_KEY_BASE: "${globals.SECRET_KEY_BASE}"
    SMTP_ADDRESS: "${settings.SMTP_HELO_DOMAIN}"
    SMTP_AUTHENTICATION: "${settings.SMTP_AUTHENTICATION}"
    SMTP_DOMAIN: "${settings.SMTP_DOMAIN}"
    SMTP_USERNAME: "${settings.SMTP_USERNAME}"
    SMTP_PASSWORD: "${settings.SMTP_PASSWORD}"
    SMTP_PORT: "${settings.SMTP_PORT}"
    RAILS_CACHE_MODE: "redis"
    RAILS_CACHE_REDIS_URL: "redis://${globals.REDIS_USER}:${globals.REDIS_PASSWORD}@redis:6379/0"
    RAILS_JOB_MODE: "sidekiq"
    JOB_REDIS_URL: "redis://${globals.REDIS_USER}:${globals.REDIS_PASSWORD}@redis:6379/1"
    SMTP_STARTTLS_AUTO: true
    TZ: "${settings.TIMEZONE}"
    DOCKER_EXPOSED_PORT: 3000
    PORT: 3000
    WEBHOOK_PASSWORD: "${settings.WEBHOOK_PASSWORD}"
    WEBHOOK_USERNAME: "${settings.WEBHOOK_USERNAME}"
    WEBHOOK_URL: "${settings.WEBHOOK_URL}"
    WEBHOOK_HMAC: "${settings.WEBHOOK_HMAC}"
  links:
  - sqldb:psql
  - nosqldb:redis
  image: "${settings.JOB_IMAGE_PAGE}"
  registry:
    url: "${settings.JOB_IMAGE_REGISTRY}"
    user: "${settings.IMAGE_USERNAME}"
    password: "${settings.IMAGE_PASSWORD}"
  nodeGroup: vocacity
  volumes:
  - /home/decidim/app/public
  volumeMounts:
    /home/decidim/app/public:
      protocol: NFS4
      readOnly: false
      sourceNodeGroup: storage
      sourcePath: "/data"

# DATA : postgres database
- displayName: PG
  fixedCloudlets: 3
  flexibleCloudlets: 12
  diskLimit: 100G
  nodeGroup: sqldb
  image: postgres:14.1
  isSLBAccessEnabled: false
  env:
    POSTGRES_PASSWORD: "${globals.DB_PASSWORD}"
    POSTGRES_DB: decidim
    POSTGRES_USER: "${globals.DB_USER}"
    TZ: "${settings.TIMEZONE}"
    PGTZ: "${settings.TIMEZONE}"
    ADMINPANEL_ENABLED: false
  volumes:
  - "/var/lib/postgresql/data"

- displayName: Redis 
  image: jelastic/redis:6.2.6
  fixedCloudlets: 2
  flexibleCloudlets: 16
  nodeGroup: nosqldb

# DATA : shared public folder
- displayName: Shared Files
  cloudlets: 2
  diskLimit: 100G
  nodeGroup: storage
  nodeType: storage
  tag: 2.0-9.4
  isSLBAccessEnabled: false
  env:
    HOME_DIR: "/data"
  volumes:
  - /data
onInstall: 
  - replaceInFile:
      nodeType: nosqldb
      path: /etc/redis.conf
      replacements:
      - pattern: "# masterauth <master-password>"
        replacement: masterauth ${globals.REDIS_PASSWORD}
      - pattern: "# masteruser <username>"
        replacement: masteruser ${globals.REDIS_USER}
      - pattern: "databases 16"
        replacement: databases 5
  - restartNodes:
      nodeType: nosqldb
  - prepareDB
  - webhook

actions:
  prepareDB:
    cmd[vocacity]: cd $RAILS_ROOT && bundle exec rails db:migrate
  webhook:
    cmd[vocacity]:
      |
        cd $RAILS_ROOT
        echo '''
        # TODO: Add a custom Logger to log the operation
        require "net/http"
        require "uri"
        require "json"
        content = {
            success: 1,
            instanceUUID: ENV.fetch("INSTANCE_UUID")
        }
        payload = {
          event_type: "decidim.install",
          content: content,
          content_hmac: OpenSSL::HMAC.hexdigest(
            OpenSSL::Digest.new("sha256"),
            "${settings.WEBHOOK_HMAC}",
            content.to_json
          )
        }
        webhook_url = "#{ENV.fetch("WEBHOOK_URL")}/#{ENV.fetch("INSTANCE_UUID")}"
        uri = URI.parse(webhook_url)
        header = {"Content-Type": "text/json"}
        http = Net::HTTP.new(uri.host, uri.port)
        request = Net::HTTP::Post.new(uri.request_uri, header)
        request.body = payload.to_json
        puts "POST #{webhook_url} #{request.body}"
        response = http.request(request)
        ''' > lib/setup_decidim.rb
        bin/rails runner lib/setup_decidim.rb
        rm lib/setup_decidim.rb
        echo "Vanilla decidim is mounted, waiting for seeding"

success: |
  ## Your Decidim is almost ready !
  will be visible in ${env.url}
startPage: https://${env.envName}.voca.city/
